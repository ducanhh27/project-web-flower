import { Injectable, BadRequestException, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { ApplyCouponDto, CreateCouponDto } from 'src/dto/coupon/coupon.dto';
import { Coupon } from 'src/schema/coupon/coupon.schema';
import { Orders } from 'src/schema/order/orders.schema';

@Injectable()
export class CouponService {
  constructor(@InjectModel(Coupon.name) private couponModel: Model<Coupon>,
              @InjectModel(Orders.name) private orderModel: Model<Orders>,
) {}

  // üéØ T·∫°o m√£ gi·∫£m gi√° m·ªõi
  async createCoupon(dto: CreateCouponDto): Promise<Coupon> {
    const { code,type,discount_value } = dto;

    // Ki·ªÉm tra tr√πng m√£
    const existingCoupon = await this.couponModel.findOne({ code });
    if (existingCoupon) throw new BadRequestException('M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i');
    
    if (type === 'percentage' && (discount_value < 0 || discount_value > 100)) {
      throw new BadRequestException('Gi√° tr·ªã ph·∫ßn trƒÉm ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 0 ƒë·∫øn 100');
    }
    return this.couponModel.create(dto);
  }

  // üìã L·∫•y danh s√°ch t·∫•t c·∫£ m√£ gi·∫£m gi√°
  async getAllCoupons(): Promise<Coupon[]> {
    return this.couponModel.find().sort({ createdAt: -1 });
  }

  // üîç L·∫•y th√¥ng tin m√£ gi·∫£m gi√° theo code
  async getCouponByCode(code: string): Promise<Coupon> {
    const coupon = await this.couponModel.findOne({ code });
    if (!coupon) throw new NotFoundException('Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°');
    return coupon;
  }

  // üéØ √Åp d·ª•ng m√£ gi·∫£m gi√°
  async applyCoupon(userId: string, dto: ApplyCouponDto) {
    const coupon = await this.couponModel.findOne({ code: dto.code, is_active: true });
   
    //Ki·ªÉm tra t√≠nh h·ª£p l·ªá
    if (!coupon) {
        throw new BadRequestException('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ');
    }
    const now = new Date();

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng ƒë∆°n h√†ng c·ªßa user (n·∫øu c√≥ ƒëi·ªÅu ki·ªán)
    const orderCount = await this.orderModel.countDocuments({ user: userId });
    if (orderCount < coupon.minimum_orders) {
        throw new BadRequestException(`B·∫°n c·∫ßn √≠t nh·∫•t ${coupon.minimum_orders} ƒë∆°n h√†ng ƒë·ªÉ √°p d·ª•ng m√£ n√†y`);
    }

    // Ki·ªÉm tra s·ªë l·∫ßn s·ª≠ d·ª•ng c√≤n l·∫°i c·ªßa m√£
    if (coupon.max_usage <= 0) {
        throw new BadRequestException('M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng');
    }

    // Gi·∫£m s·ªë l·∫ßn s·ª≠ d·ª•ng ƒëi 1
    await this.couponModel.updateOne(
        { _id: coupon._id },
        { $inc: { max_usage: -1 } } // Gi·∫£m max_usage ƒëi 1
    );

    return { message: 'M√£ gi·∫£m gi√° h·ª£p l·ªá', discount: coupon.discount_value,type:coupon.type, couponId:coupon._id };
}


  // üõ†Ô∏è C·∫≠p nh·∫≠t m√£ gi·∫£m gi√°
  async updateCoupon(id: string, dto: Partial<CreateCouponDto>): Promise<Coupon> {
    const coupon = await this.couponModel.findByIdAndUpdate(id, dto, { new: true });
    if (!coupon) throw new NotFoundException('Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°');
    return coupon;
  }

  // ‚ùå X√≥a m√£ gi·∫£m gi√°
  async deleteCoupon(id: string): Promise<{ message: string }> {
    const result = await this.couponModel.findByIdAndDelete(id);
    if (!result) throw new NotFoundException('Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°');
    return { message: 'ƒê√£ x√≥a m√£ gi·∫£m gi√° th√†nh c√¥ng' };
  }
}
